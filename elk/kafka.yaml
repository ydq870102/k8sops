kind: ConfigMap
metadata:
  name: broker-config
  namespace: elkstack
apiVersion: v1
data:
  server.properties: |-
    ############################# Log Basics #############################
    # A comma seperated list of directories under which to store log files
    # Overrides log.dir
    log.dirs=/opt/kafka/data
    # The default number of log partitions per topic. More partitions allow greater
    # parallelism for consumption, but this will also result in more files across
    # the brokers.
    num.partitions=12
    default.replication.factor=3
    min.insync.replicas=2
    auto.create.topics.enable=true
    # The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
    # This value is recommended to be increased for installations with data dirs located in RAID array.
    #num.recovery.threads.per.data.dir=1
    ############################# Server Basics #############################
    # The id of the broker. This must be set to a unique integer for each broker.
    #init#broker.id=#init#
    #init#broker.rack=#init#
    ############################# Socket Server Settings #############################
    # The address the socket server listens on. It will get the value returned from
    # java.net.InetAddress.getCanonicalHostName() if not configured.
    #   FORMAT:
    #     listeners = listener_name://host_name:port
    #   EXAMPLE:
    #     listeners = PLAINTEXT://your.host.name:9092
    #listeners=PLAINTEXT://:9092
    listeners=PLAINTEXT://:9092,OUTSIDE://:9094
    # Hostname and port the broker will advertise to producers and consumers. If not set,
    # it uses the value for "listeners" if configured.  Otherwise, it will use the value
    # returned from java.net.InetAddress.getCanonicalHostName().
    #advertised.listeners=PLAINTEXT://your.host.name:9092
    #init#advertised.listeners=PLAINTEXT://#init#
    # Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
    #listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
    listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,OUTSIDE:PLAINTEXT
    inter.broker.listener.name=PLAINTEXT
    # The number of threads that the server uses for receiving requests from the network and sending responses to the network
    #num.network.threads=3
    # The number of threads that the server uses for processing requests, which may include disk I/O
    #num.io.threads=8
    # The send buffer (SO_SNDBUF) used by the socket server
    #socket.send.buffer.bytes=102400
    # The receive buffer (SO_RCVBUF) used by the socket server
    #socket.receive.buffer.bytes=102400
    # The maximum size of a request that the socket server will accept (protection against OOM)
    #socket.request.max.bytes=104857600
    ############################# Internal Topic Settings  #############################
    # The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
    # For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
    #offsets.topic.replication.factor=1
    #transaction.state.log.replication.factor=1
    #transaction.state.log.min.isr=1
    ############################# Log Flush Policy #############################
    # Messages are immediately written to the filesystem but by default we only fsync() to sync
    # the OS cache lazily. The following configurations control the flush of data to disk.
    # There are a few important trade-offs here:
    #    1. Durability: Unflushed data may be lost if you are not using replication.
    #    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
    #    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
    # The settings below allow one to configure the flush policy to flush data after a period of time or
    # every N messages (or both). This can be done globally and overridden on a per-topic basis.
    # The number of messages to accept before forcing a flush of data to disk
    #log.flush.interval.messages=10000
    # The maximum amount of time a message can sit in a log before we force a flush
    #log.flush.interval.ms=1000
    ############################# Log Retention Policy #############################
    # The following configurations control the disposal of log segments. The policy can
    # be set to delete segments after a period of time, or after a given size has accumulated.
    # A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
    # from the end of the log.
    # https://cwiki.apache.org/confluence/display/KAFKA/KIP-186%3A+Increase+offsets+retention+default+to+7+days
    offsets.retention.minutes=10080
    # The minimum age of a log file to be eligible for deletion due to age
    log.retention.hours=24
    # A size-based retention policy for logs. Segments are pruned from the log unless the remaining
    # segments drop below log.retention.bytes. Functions independently of log.retention.hours.
    #log.retention.bytes=1073741824
    # The maximum size of a log segment file. When this size is reached a new log segment will be created.
    #log.segment.bytes=1073741824
    # The interval at which log segments are checked to see if they can be deleted according
    # to the retention policies
    #log.retention.check.interval.ms=300000
    log.retention.check.interval.ms=60000
    ############################# Zookeeper #############################
    # Zookeeper connection string (see zookeeper docs for details).
    # This is a comma separated host:port pairs, each corresponding to a zk
    # server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
    # You can also append an optional chroot string to the urls to specify the
    # root directory for all kafka znodes.
    zookeeper.connect=zookeeper-cluster:2181
    # Timeout in ms for connecting to zookeeper
    #zookeeper.connection.timeout.ms=6000
    ############################# Group Coordinator Settings #############################
    # The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
    # The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
    # The default value for this is 3 seconds.
    # We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
    # However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
    #group.initial.rebalance.delay.ms=0

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: alicloud-nas-kafka
mountOptions:
  - nolock,tcp,noresvport
  - vers=3
parameters:
  server: "0541648848-ora18.cn-hangzhou.nas.aliyuncs.com:/elk/kafka/"
  driver: flexvolume
provisioner: alicloud/nas
reclaimPolicy: Retain

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: elkstack
spec:
  selector:
    matchLabels:
      app: kafka
  serviceName: bootstrap-kafka
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: kafka
      annotations:
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: kafka-broker
        image: russellgao/kafka:0.10.2.0
        ports:
        - name: inside
          containerPort: 9092
        - name: outside
          containerPort: 9094
        resources:
          requests:
            cpu: 0.1
            memory: 1024Mi
          limits:
            memory: 1536Mi
        readinessProbe:
          tcpSocket:
            port: 9092
          timeoutSeconds: 1
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 9092
          timeoutSeconds: 1
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: config
          mountPath: /opt/kafka/config/server.properties
          readOnly: true
          subPath: server.properties
        - name: kafka-data
          mountPath: /opt/kafka/data
        - name: kafka-logs
          mountPath: /opt/kafka/logs
      volumes:
      - name: config
        configMap:
          name: broker-config
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: alicloud-nas-kafka
      resources:
        requests:
          storage: 1000Gi
  - metadata:
      name: kafka-logs
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: alicloud-nas-kafka
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: bootstrap-kafka
  namespace: elkstack
spec:
  ports:
  - port: 9092
  selector:
    app: kafka
